generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  accounts      Account[]
  employees     Employee[]
  projects      Project[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Employee {
  id          String   @id @default(cuid())
  employeeId  String   @unique
  name        String
  joiningDate DateTime
  basicSalary Float
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  salaries    Salary[]
  tasks       Task[]
}

model Salary {
  id         String   @id @default(cuid())
  month      DateTime
  bonus      Float    @default(0)
  deduction  Float    @default(0)
  employeeId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([employeeId, month])
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks       Task[]
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  priority    String    @default("MEDIUM")
  status      String    @default("BACKLOG")
  projectId   String
  employeeId  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  employee    Employee? @relation(fields: [employeeId], references: [id])
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
}
